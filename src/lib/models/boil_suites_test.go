// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Categories", testCategories)
	t.Run("Contents", testContents)
	t.Run("Favorites", testFavorites)
	t.Run("Follows", testFollows)
	t.Run("GorpMigrations", testGorpMigrations)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Categories", testCategoriesDelete)
	t.Run("Contents", testContentsDelete)
	t.Run("Favorites", testFavoritesDelete)
	t.Run("Follows", testFollowsDelete)
	t.Run("GorpMigrations", testGorpMigrationsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Contents", testContentsQueryDeleteAll)
	t.Run("Favorites", testFavoritesQueryDeleteAll)
	t.Run("Follows", testFollowsQueryDeleteAll)
	t.Run("GorpMigrations", testGorpMigrationsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Contents", testContentsSliceDeleteAll)
	t.Run("Favorites", testFavoritesSliceDeleteAll)
	t.Run("Follows", testFollowsSliceDeleteAll)
	t.Run("GorpMigrations", testGorpMigrationsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Categories", testCategoriesExists)
	t.Run("Contents", testContentsExists)
	t.Run("Favorites", testFavoritesExists)
	t.Run("Follows", testFollowsExists)
	t.Run("GorpMigrations", testGorpMigrationsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Categories", testCategoriesFind)
	t.Run("Contents", testContentsFind)
	t.Run("Favorites", testFavoritesFind)
	t.Run("Follows", testFollowsFind)
	t.Run("GorpMigrations", testGorpMigrationsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Categories", testCategoriesBind)
	t.Run("Contents", testContentsBind)
	t.Run("Favorites", testFavoritesBind)
	t.Run("Follows", testFollowsBind)
	t.Run("GorpMigrations", testGorpMigrationsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Categories", testCategoriesOne)
	t.Run("Contents", testContentsOne)
	t.Run("Favorites", testFavoritesOne)
	t.Run("Follows", testFollowsOne)
	t.Run("GorpMigrations", testGorpMigrationsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Categories", testCategoriesAll)
	t.Run("Contents", testContentsAll)
	t.Run("Favorites", testFavoritesAll)
	t.Run("Follows", testFollowsAll)
	t.Run("GorpMigrations", testGorpMigrationsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Categories", testCategoriesCount)
	t.Run("Contents", testContentsCount)
	t.Run("Favorites", testFavoritesCount)
	t.Run("Follows", testFollowsCount)
	t.Run("GorpMigrations", testGorpMigrationsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Categories", testCategoriesHooks)
	t.Run("Contents", testContentsHooks)
	t.Run("Favorites", testFavoritesHooks)
	t.Run("Follows", testFollowsHooks)
	t.Run("GorpMigrations", testGorpMigrationsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Contents", testContentsInsert)
	t.Run("Contents", testContentsInsertWhitelist)
	t.Run("Favorites", testFavoritesInsert)
	t.Run("Favorites", testFavoritesInsertWhitelist)
	t.Run("Follows", testFollowsInsert)
	t.Run("Follows", testFollowsInsertWhitelist)
	t.Run("GorpMigrations", testGorpMigrationsInsert)
	t.Run("GorpMigrations", testGorpMigrationsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ContentToCategoryUsingCategory", testContentToOneCategoryUsingCategory)
	t.Run("ContentToUserUsingUser", testContentToOneUserUsingUser)
	t.Run("FavoriteToContentUsingContent", testFavoriteToOneContentUsingContent)
	t.Run("FavoriteToUserUsingUser", testFavoriteToOneUserUsingUser)
	t.Run("FollowToUserUsingFollower", testFollowToOneUserUsingFollower)
	t.Run("FollowToUserUsingFollowing", testFollowToOneUserUsingFollowing)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CategoryToContents", testCategoryToManyContents)
	t.Run("ContentToFavorites", testContentToManyFavorites)
	t.Run("UserToContents", testUserToManyContents)
	t.Run("UserToFavorites", testUserToManyFavorites)
	t.Run("UserToFollowerFollows", testUserToManyFollowerFollows)
	t.Run("UserToFollowingFollows", testUserToManyFollowingFollows)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ContentToCategoryUsingContents", testContentToOneSetOpCategoryUsingCategory)
	t.Run("ContentToUserUsingContents", testContentToOneSetOpUserUsingUser)
	t.Run("FavoriteToContentUsingFavorites", testFavoriteToOneSetOpContentUsingContent)
	t.Run("FavoriteToUserUsingFavorites", testFavoriteToOneSetOpUserUsingUser)
	t.Run("FollowToUserUsingFollowerFollows", testFollowToOneSetOpUserUsingFollower)
	t.Run("FollowToUserUsingFollowingFollows", testFollowToOneSetOpUserUsingFollowing)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ContentToUserUsingContents", testContentToOneRemoveOpUserUsingUser)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CategoryToContents", testCategoryToManyAddOpContents)
	t.Run("ContentToFavorites", testContentToManyAddOpFavorites)
	t.Run("UserToContents", testUserToManyAddOpContents)
	t.Run("UserToFavorites", testUserToManyAddOpFavorites)
	t.Run("UserToFollowerFollows", testUserToManyAddOpFollowerFollows)
	t.Run("UserToFollowingFollows", testUserToManyAddOpFollowingFollows)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("UserToContents", testUserToManySetOpContents)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("UserToContents", testUserToManyRemoveOpContents)
}

func TestReload(t *testing.T) {
	t.Run("Categories", testCategoriesReload)
	t.Run("Contents", testContentsReload)
	t.Run("Favorites", testFavoritesReload)
	t.Run("Follows", testFollowsReload)
	t.Run("GorpMigrations", testGorpMigrationsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Contents", testContentsReloadAll)
	t.Run("Favorites", testFavoritesReloadAll)
	t.Run("Follows", testFollowsReloadAll)
	t.Run("GorpMigrations", testGorpMigrationsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Categories", testCategoriesSelect)
	t.Run("Contents", testContentsSelect)
	t.Run("Favorites", testFavoritesSelect)
	t.Run("Follows", testFollowsSelect)
	t.Run("GorpMigrations", testGorpMigrationsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Contents", testContentsUpdate)
	t.Run("Favorites", testFavoritesUpdate)
	t.Run("Follows", testFollowsUpdate)
	t.Run("GorpMigrations", testGorpMigrationsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Contents", testContentsSliceUpdateAll)
	t.Run("Favorites", testFavoritesSliceUpdateAll)
	t.Run("Follows", testFollowsSliceUpdateAll)
	t.Run("GorpMigrations", testGorpMigrationsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
