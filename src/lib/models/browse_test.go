// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBrowses(t *testing.T) {
	t.Parallel()

	query := Browses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBrowsesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBrowsesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Browses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBrowsesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BrowseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBrowsesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BrowseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Browse exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BrowseExists to return true, but got false.")
	}
}

func testBrowsesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	browseFound, err := FindBrowse(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if browseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBrowsesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Browses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBrowsesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Browses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBrowsesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	browseOne := &Browse{}
	browseTwo := &Browse{}
	if err = randomize.Struct(seed, browseOne, browseDBTypes, false, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}
	if err = randomize.Struct(seed, browseTwo, browseDBTypes, false, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = browseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = browseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Browses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBrowsesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	browseOne := &Browse{}
	browseTwo := &Browse{}
	if err = randomize.Struct(seed, browseOne, browseDBTypes, false, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}
	if err = randomize.Struct(seed, browseTwo, browseDBTypes, false, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = browseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = browseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func browseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func browseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func browseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func browseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func browseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func browseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func browseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func browseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func browseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Browse) error {
	*o = Browse{}
	return nil
}

func testBrowsesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Browse{}
	o := &Browse{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, browseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Browse object: %s", err)
	}

	AddBrowseHook(boil.BeforeInsertHook, browseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	browseBeforeInsertHooks = []BrowseHook{}

	AddBrowseHook(boil.AfterInsertHook, browseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	browseAfterInsertHooks = []BrowseHook{}

	AddBrowseHook(boil.AfterSelectHook, browseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	browseAfterSelectHooks = []BrowseHook{}

	AddBrowseHook(boil.BeforeUpdateHook, browseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	browseBeforeUpdateHooks = []BrowseHook{}

	AddBrowseHook(boil.AfterUpdateHook, browseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	browseAfterUpdateHooks = []BrowseHook{}

	AddBrowseHook(boil.BeforeDeleteHook, browseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	browseBeforeDeleteHooks = []BrowseHook{}

	AddBrowseHook(boil.AfterDeleteHook, browseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	browseAfterDeleteHooks = []BrowseHook{}

	AddBrowseHook(boil.BeforeUpsertHook, browseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	browseBeforeUpsertHooks = []BrowseHook{}

	AddBrowseHook(boil.AfterUpsertHook, browseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	browseAfterUpsertHooks = []BrowseHook{}
}

func testBrowsesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBrowsesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(browseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBrowseToOneContentUsingContent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Browse
	var foreign Content

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, browseDBTypes, false, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, contentDBTypes, false, contentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Content struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Content().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BrowseSlice{&local}
	if err = local.L.LoadContent(ctx, tx, false, (*[]*Browse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Content == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Content = nil
	if err = local.L.LoadContent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Content == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBrowseToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Browse
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, browseDBTypes, false, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BrowseSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Browse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBrowseToOneSetOpContentUsingContent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Browse
	var b, c Content

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, browseDBTypes, false, strmangle.SetComplement(browsePrimaryKeyColumns, browseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contentDBTypes, false, strmangle.SetComplement(contentPrimaryKeyColumns, contentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contentDBTypes, false, strmangle.SetComplement(contentPrimaryKeyColumns, contentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Content{&b, &c} {
		err = a.SetContent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Content != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Browses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContentID != x.ID {
			t.Error("foreign key was wrong value", a.ContentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ContentID))
		reflect.Indirect(reflect.ValueOf(&a.ContentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ContentID != x.ID {
			t.Error("foreign key was wrong value", a.ContentID, x.ID)
		}
	}
}
func testBrowseToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Browse
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, browseDBTypes, false, strmangle.SetComplement(browsePrimaryKeyColumns, browseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Browses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testBrowsesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBrowsesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BrowseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBrowsesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Browses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	browseDBTypes = map[string]string{`ID`: `int`, `UserID`: `int`, `ContentID`: `int`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_             = bytes.MinRead
)

func testBrowsesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(browsePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(browseAllColumns) == len(browsePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, browseDBTypes, true, browsePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBrowsesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(browseAllColumns) == len(browsePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Browse{}
	if err = randomize.Struct(seed, o, browseDBTypes, true, browseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, browseDBTypes, true, browsePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(browseAllColumns, browsePrimaryKeyColumns) {
		fields = browseAllColumns
	} else {
		fields = strmangle.SetComplement(
			browseAllColumns,
			browsePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BrowseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBrowsesUpsert(t *testing.T) {
	t.Parallel()

	if len(browseAllColumns) == len(browsePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBrowseUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Browse{}
	if err = randomize.Struct(seed, &o, browseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Browse: %s", err)
	}

	count, err := Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, browseDBTypes, false, browsePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Browse struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Browse: %s", err)
	}

	count, err = Browses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
