// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Follow is an object representing the database table.
type Follow struct {
	ID          int `boil:"id" json:"id" toml:"id" yaml:"id"`
	FollowingID int `boil:"following_id" json:"following_id" toml:"following_id" yaml:"following_id"`
	FollowerID  int `boil:"follower_id" json:"follower_id" toml:"follower_id" yaml:"follower_id"`

	R *followR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L followL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FollowColumns = struct {
	ID          string
	FollowingID string
	FollowerID  string
}{
	ID:          "id",
	FollowingID: "following_id",
	FollowerID:  "follower_id",
}

// Generated where

var FollowWhere = struct {
	ID          whereHelperint
	FollowingID whereHelperint
	FollowerID  whereHelperint
}{
	ID:          whereHelperint{field: "`follow`.`id`"},
	FollowingID: whereHelperint{field: "`follow`.`following_id`"},
	FollowerID:  whereHelperint{field: "`follow`.`follower_id`"},
}

// FollowRels is where relationship names are stored.
var FollowRels = struct {
	Follower  string
	Following string
}{
	Follower:  "Follower",
	Following: "Following",
}

// followR is where relationships are stored.
type followR struct {
	Follower  *User `boil:"Follower" json:"Follower" toml:"Follower" yaml:"Follower"`
	Following *User `boil:"Following" json:"Following" toml:"Following" yaml:"Following"`
}

// NewStruct creates a new relationship struct
func (*followR) NewStruct() *followR {
	return &followR{}
}

// followL is where Load methods for each relationship are stored.
type followL struct{}

var (
	followAllColumns            = []string{"id", "following_id", "follower_id"}
	followColumnsWithoutDefault = []string{"following_id", "follower_id"}
	followColumnsWithDefault    = []string{"id"}
	followPrimaryKeyColumns     = []string{"id"}
)

type (
	// FollowSlice is an alias for a slice of pointers to Follow.
	// This should generally be used opposed to []Follow.
	FollowSlice []*Follow
	// FollowHook is the signature for custom Follow hook methods
	FollowHook func(context.Context, boil.ContextExecutor, *Follow) error

	followQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	followType                 = reflect.TypeOf(&Follow{})
	followMapping              = queries.MakeStructMapping(followType)
	followPrimaryKeyMapping, _ = queries.BindMapping(followType, followMapping, followPrimaryKeyColumns)
	followInsertCacheMut       sync.RWMutex
	followInsertCache          = make(map[string]insertCache)
	followUpdateCacheMut       sync.RWMutex
	followUpdateCache          = make(map[string]updateCache)
	followUpsertCacheMut       sync.RWMutex
	followUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var followBeforeInsertHooks []FollowHook
var followBeforeUpdateHooks []FollowHook
var followBeforeDeleteHooks []FollowHook
var followBeforeUpsertHooks []FollowHook

var followAfterInsertHooks []FollowHook
var followAfterSelectHooks []FollowHook
var followAfterUpdateHooks []FollowHook
var followAfterDeleteHooks []FollowHook
var followAfterUpsertHooks []FollowHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Follow) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Follow) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Follow) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Follow) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Follow) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Follow) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Follow) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Follow) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Follow) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFollowHook registers your hook function for all future operations.
func AddFollowHook(hookPoint boil.HookPoint, followHook FollowHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		followBeforeInsertHooks = append(followBeforeInsertHooks, followHook)
	case boil.BeforeUpdateHook:
		followBeforeUpdateHooks = append(followBeforeUpdateHooks, followHook)
	case boil.BeforeDeleteHook:
		followBeforeDeleteHooks = append(followBeforeDeleteHooks, followHook)
	case boil.BeforeUpsertHook:
		followBeforeUpsertHooks = append(followBeforeUpsertHooks, followHook)
	case boil.AfterInsertHook:
		followAfterInsertHooks = append(followAfterInsertHooks, followHook)
	case boil.AfterSelectHook:
		followAfterSelectHooks = append(followAfterSelectHooks, followHook)
	case boil.AfterUpdateHook:
		followAfterUpdateHooks = append(followAfterUpdateHooks, followHook)
	case boil.AfterDeleteHook:
		followAfterDeleteHooks = append(followAfterDeleteHooks, followHook)
	case boil.AfterUpsertHook:
		followAfterUpsertHooks = append(followAfterUpsertHooks, followHook)
	}
}

// One returns a single follow record from the query.
func (q followQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Follow, error) {
	o := &Follow{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for follow")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Follow records from the query.
func (q followQuery) All(ctx context.Context, exec boil.ContextExecutor) (FollowSlice, error) {
	var o []*Follow

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Follow slice")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Follow records in the query.
func (q followQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count follow rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q followQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if follow exists")
	}

	return count > 0, nil
}

// Follower pointed to by the foreign key.
func (o *Follow) Follower(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.FollowerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// Following pointed to by the foreign key.
func (o *Follow) Following(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.FollowingID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadFollower allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followL) LoadFollower(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFollow interface{}, mods queries.Applicator) error {
	var slice []*Follow
	var object *Follow

	if singular {
		object = maybeFollow.(*Follow)
	} else {
		slice = *maybeFollow.(*[]*Follow)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &followR{}
		}
		args = append(args, object.FollowerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followR{}
			}

			for _, a := range args {
				if a == obj.FollowerID {
					continue Outer
				}
			}

			args = append(args, obj.FollowerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Follower = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FollowerFollows = append(foreign.R.FollowerFollows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FollowerID == foreign.ID {
				local.R.Follower = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowerFollows = append(foreign.R.FollowerFollows, local)
				break
			}
		}
	}

	return nil
}

// LoadFollowing allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followL) LoadFollowing(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFollow interface{}, mods queries.Applicator) error {
	var slice []*Follow
	var object *Follow

	if singular {
		object = maybeFollow.(*Follow)
	} else {
		slice = *maybeFollow.(*[]*Follow)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &followR{}
		}
		args = append(args, object.FollowingID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followR{}
			}

			for _, a := range args {
				if a == obj.FollowingID {
					continue Outer
				}
			}

			args = append(args, obj.FollowingID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Following = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FollowingFollows = append(foreign.R.FollowingFollows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FollowingID == foreign.ID {
				local.R.Following = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowingFollows = append(foreign.R.FollowingFollows, local)
				break
			}
		}
	}

	return nil
}

// SetFollower of the follow to the related item.
// Sets o.R.Follower to related.
// Adds o to related.R.FollowerFollows.
func (o *Follow) SetFollower(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `follow` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"follower_id"}),
		strmangle.WhereClause("`", "`", 0, followPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FollowerID = related.ID
	if o.R == nil {
		o.R = &followR{
			Follower: related,
		}
	} else {
		o.R.Follower = related
	}

	if related.R == nil {
		related.R = &userR{
			FollowerFollows: FollowSlice{o},
		}
	} else {
		related.R.FollowerFollows = append(related.R.FollowerFollows, o)
	}

	return nil
}

// SetFollowing of the follow to the related item.
// Sets o.R.Following to related.
// Adds o to related.R.FollowingFollows.
func (o *Follow) SetFollowing(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `follow` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"following_id"}),
		strmangle.WhereClause("`", "`", 0, followPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FollowingID = related.ID
	if o.R == nil {
		o.R = &followR{
			Following: related,
		}
	} else {
		o.R.Following = related
	}

	if related.R == nil {
		related.R = &userR{
			FollowingFollows: FollowSlice{o},
		}
	} else {
		related.R.FollowingFollows = append(related.R.FollowingFollows, o)
	}

	return nil
}

// Follows retrieves all the records using an executor.
func Follows(mods ...qm.QueryMod) followQuery {
	mods = append(mods, qm.From("`follow`"))
	return followQuery{NewQuery(mods...)}
}

// FindFollow retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFollow(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Follow, error) {
	followObj := &Follow{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `follow` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, followObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from follow")
	}

	return followObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Follow) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no follow provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(followColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	followInsertCacheMut.RLock()
	cache, cached := followInsertCache[key]
	followInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			followAllColumns,
			followColumnsWithDefault,
			followColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(followType, followMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(followType, followMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `follow` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `follow` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `follow` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, followPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into follow")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == followMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for follow")
	}

CacheNoHooks:
	if !cached {
		followInsertCacheMut.Lock()
		followInsertCache[key] = cache
		followInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Follow.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Follow) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	followUpdateCacheMut.RLock()
	cache, cached := followUpdateCache[key]
	followUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			followAllColumns,
			followPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update follow, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `follow` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, followPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(followType, followMapping, append(wl, followPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update follow row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for follow")
	}

	if !cached {
		followUpdateCacheMut.Lock()
		followUpdateCache[key] = cache
		followUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q followQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for follow")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for follow")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FollowSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `follow` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, followPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in follow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all follow")
	}
	return rowsAff, nil
}

var mySQLFollowUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Follow) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no follow provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(followColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFollowUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	followUpsertCacheMut.RLock()
	cache, cached := followUpsertCache[key]
	followUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			followAllColumns,
			followColumnsWithDefault,
			followColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			followAllColumns,
			followPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert follow, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`follow`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `follow` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(followType, followMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(followType, followMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for follow")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == followMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(followType, followMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for follow")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for follow")
	}

CacheNoHooks:
	if !cached {
		followUpsertCacheMut.Lock()
		followUpsertCache[key] = cache
		followUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Follow record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Follow) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Follow provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), followPrimaryKeyMapping)
	sql := "DELETE FROM `follow` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from follow")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for follow")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q followQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no followQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from follow")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for follow")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FollowSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(followBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `follow` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, followPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from follow slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for follow")
	}

	if len(followAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Follow) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFollow(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FollowSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FollowSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `follow`.* FROM `follow` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, followPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FollowSlice")
	}

	*o = slice

	return nil
}

// FollowExists checks if the Follow row exists.
func FollowExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `follow` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if follow exists")
	}

	return exists, nil
}
