// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNoticeFavorites(t *testing.T) {
	t.Parallel()

	query := NoticeFavorites()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNoticeFavoritesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoticeFavoritesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := NoticeFavorites().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoticeFavoritesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NoticeFavoriteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoticeFavoritesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NoticeFavoriteExists(ctx, tx, o.NoticeID)
	if err != nil {
		t.Errorf("Unable to check if NoticeFavorite exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NoticeFavoriteExists to return true, but got false.")
	}
}

func testNoticeFavoritesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	noticeFavoriteFound, err := FindNoticeFavorite(ctx, tx, o.NoticeID)
	if err != nil {
		t.Error(err)
	}

	if noticeFavoriteFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNoticeFavoritesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = NoticeFavorites().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNoticeFavoritesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := NoticeFavorites().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNoticeFavoritesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	noticeFavoriteOne := &NoticeFavorite{}
	noticeFavoriteTwo := &NoticeFavorite{}
	if err = randomize.Struct(seed, noticeFavoriteOne, noticeFavoriteDBTypes, false, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}
	if err = randomize.Struct(seed, noticeFavoriteTwo, noticeFavoriteDBTypes, false, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = noticeFavoriteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = noticeFavoriteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NoticeFavorites().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNoticeFavoritesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	noticeFavoriteOne := &NoticeFavorite{}
	noticeFavoriteTwo := &NoticeFavorite{}
	if err = randomize.Struct(seed, noticeFavoriteOne, noticeFavoriteDBTypes, false, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}
	if err = randomize.Struct(seed, noticeFavoriteTwo, noticeFavoriteDBTypes, false, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = noticeFavoriteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = noticeFavoriteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func noticeFavoriteBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func noticeFavoriteAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func noticeFavoriteAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func noticeFavoriteBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func noticeFavoriteAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func noticeFavoriteBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func noticeFavoriteAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func noticeFavoriteBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func noticeFavoriteAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *NoticeFavorite) error {
	*o = NoticeFavorite{}
	return nil
}

func testNoticeFavoritesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &NoticeFavorite{}
	o := &NoticeFavorite{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite object: %s", err)
	}

	AddNoticeFavoriteHook(boil.BeforeInsertHook, noticeFavoriteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteBeforeInsertHooks = []NoticeFavoriteHook{}

	AddNoticeFavoriteHook(boil.AfterInsertHook, noticeFavoriteAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteAfterInsertHooks = []NoticeFavoriteHook{}

	AddNoticeFavoriteHook(boil.AfterSelectHook, noticeFavoriteAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteAfterSelectHooks = []NoticeFavoriteHook{}

	AddNoticeFavoriteHook(boil.BeforeUpdateHook, noticeFavoriteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteBeforeUpdateHooks = []NoticeFavoriteHook{}

	AddNoticeFavoriteHook(boil.AfterUpdateHook, noticeFavoriteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteAfterUpdateHooks = []NoticeFavoriteHook{}

	AddNoticeFavoriteHook(boil.BeforeDeleteHook, noticeFavoriteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteBeforeDeleteHooks = []NoticeFavoriteHook{}

	AddNoticeFavoriteHook(boil.AfterDeleteHook, noticeFavoriteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteAfterDeleteHooks = []NoticeFavoriteHook{}

	AddNoticeFavoriteHook(boil.BeforeUpsertHook, noticeFavoriteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteBeforeUpsertHooks = []NoticeFavoriteHook{}

	AddNoticeFavoriteHook(boil.AfterUpsertHook, noticeFavoriteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	noticeFavoriteAfterUpsertHooks = []NoticeFavoriteHook{}
}

func testNoticeFavoritesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNoticeFavoritesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(noticeFavoriteColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNoticeFavoriteToOneContentUsingContent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NoticeFavorite
	var foreign Content

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, noticeFavoriteDBTypes, false, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, contentDBTypes, false, contentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Content struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Content().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NoticeFavoriteSlice{&local}
	if err = local.L.LoadContent(ctx, tx, false, (*[]*NoticeFavorite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Content == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Content = nil
	if err = local.L.LoadContent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Content == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNoticeFavoriteToOneFavoriteUsingFavorite(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NoticeFavorite
	var foreign Favorite

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, noticeFavoriteDBTypes, false, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, favoriteDBTypes, false, favoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Favorite struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FavoriteID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Favorite().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NoticeFavoriteSlice{&local}
	if err = local.L.LoadFavorite(ctx, tx, false, (*[]*NoticeFavorite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Favorite == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Favorite = nil
	if err = local.L.LoadFavorite(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Favorite == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNoticeFavoriteToOneNoticeUsingNotice(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NoticeFavorite
	var foreign Notice

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, noticeFavoriteDBTypes, false, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, noticeDBTypes, false, noticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.NoticeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Notice().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NoticeFavoriteSlice{&local}
	if err = local.L.LoadNotice(ctx, tx, false, (*[]*NoticeFavorite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Notice == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Notice = nil
	if err = local.L.LoadNotice(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Notice == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNoticeFavoriteToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local NoticeFavorite
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, noticeFavoriteDBTypes, false, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NoticeFavoriteSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*NoticeFavorite)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNoticeFavoriteToOneSetOpContentUsingContent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NoticeFavorite
	var b, c Content

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, noticeFavoriteDBTypes, false, strmangle.SetComplement(noticeFavoritePrimaryKeyColumns, noticeFavoriteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, contentDBTypes, false, strmangle.SetComplement(contentPrimaryKeyColumns, contentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, contentDBTypes, false, strmangle.SetComplement(contentPrimaryKeyColumns, contentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Content{&b, &c} {
		err = a.SetContent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Content != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NoticeFavorites[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContentID != x.ID {
			t.Error("foreign key was wrong value", a.ContentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ContentID))
		reflect.Indirect(reflect.ValueOf(&a.ContentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ContentID != x.ID {
			t.Error("foreign key was wrong value", a.ContentID, x.ID)
		}
	}
}
func testNoticeFavoriteToOneSetOpFavoriteUsingFavorite(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NoticeFavorite
	var b, c Favorite

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, noticeFavoriteDBTypes, false, strmangle.SetComplement(noticeFavoritePrimaryKeyColumns, noticeFavoriteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, favoriteDBTypes, false, strmangle.SetComplement(favoritePrimaryKeyColumns, favoriteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, favoriteDBTypes, false, strmangle.SetComplement(favoritePrimaryKeyColumns, favoriteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Favorite{&b, &c} {
		err = a.SetFavorite(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Favorite != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NoticeFavorites[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FavoriteID != x.ID {
			t.Error("foreign key was wrong value", a.FavoriteID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FavoriteID))
		reflect.Indirect(reflect.ValueOf(&a.FavoriteID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FavoriteID != x.ID {
			t.Error("foreign key was wrong value", a.FavoriteID, x.ID)
		}
	}
}
func testNoticeFavoriteToOneSetOpNoticeUsingNotice(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NoticeFavorite
	var b, c Notice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, noticeFavoriteDBTypes, false, strmangle.SetComplement(noticeFavoritePrimaryKeyColumns, noticeFavoriteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, noticeDBTypes, false, strmangle.SetComplement(noticePrimaryKeyColumns, noticeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, noticeDBTypes, false, strmangle.SetComplement(noticePrimaryKeyColumns, noticeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Notice{&b, &c} {
		err = a.SetNotice(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Notice != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NoticeFavorite != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.NoticeID != x.ID {
			t.Error("foreign key was wrong value", a.NoticeID)
		}

		if exists, err := NoticeFavoriteExists(ctx, tx, a.NoticeID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testNoticeFavoriteToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a NoticeFavorite
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, noticeFavoriteDBTypes, false, strmangle.SetComplement(noticeFavoritePrimaryKeyColumns, noticeFavoriteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NoticeFavorites[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testNoticeFavoritesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNoticeFavoritesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NoticeFavoriteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNoticeFavoritesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := NoticeFavorites().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	noticeFavoriteDBTypes = map[string]string{`NoticeID`: `int`, `FavoriteID`: `int`, `UserID`: `int`, `UserThumbnailURL`: `text`, `Header`: `varchar`, `Body`: `varchar`, `ContentID`: `int`, `ContentThumbnailURL`: `text`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                     = bytes.MinRead
)

func testNoticeFavoritesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(noticeFavoritePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(noticeFavoriteAllColumns) == len(noticeFavoritePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoritePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNoticeFavoritesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(noticeFavoriteAllColumns) == len(noticeFavoritePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &NoticeFavorite{}
	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoriteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, noticeFavoriteDBTypes, true, noticeFavoritePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(noticeFavoriteAllColumns, noticeFavoritePrimaryKeyColumns) {
		fields = noticeFavoriteAllColumns
	} else {
		fields = strmangle.SetComplement(
			noticeFavoriteAllColumns,
			noticeFavoritePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NoticeFavoriteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNoticeFavoritesUpsert(t *testing.T) {
	t.Parallel()

	if len(noticeFavoriteAllColumns) == len(noticeFavoritePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLNoticeFavoriteUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := NoticeFavorite{}
	if err = randomize.Struct(seed, &o, noticeFavoriteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NoticeFavorite: %s", err)
	}

	count, err := NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, noticeFavoriteDBTypes, false, noticeFavoritePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize NoticeFavorite struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert NoticeFavorite: %s", err)
	}

	count, err = NoticeFavorites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
