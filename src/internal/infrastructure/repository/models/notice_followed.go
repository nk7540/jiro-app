// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NoticeFollowed is an object representing the database table.
type NoticeFollowed struct {
	NoticeID         int       `boil:"notice_id" json:"notice_id" toml:"notice_id" yaml:"notice_id"`
	UserID           int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	UserThumbnailURL string    `boil:"user_thumbnail_url" json:"user_thumbnail_url" toml:"user_thumbnail_url" yaml:"user_thumbnail_url"`
	Body             string    `boil:"body" json:"body" toml:"body" yaml:"body"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *noticeFollowedR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L noticeFollowedL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NoticeFollowedColumns = struct {
	NoticeID         string
	UserID           string
	UserThumbnailURL string
	Body             string
	CreatedAt        string
	UpdatedAt        string
}{
	NoticeID:         "notice_id",
	UserID:           "user_id",
	UserThumbnailURL: "user_thumbnail_url",
	Body:             "body",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var NoticeFollowedTableColumns = struct {
	NoticeID         string
	UserID           string
	UserThumbnailURL string
	Body             string
	CreatedAt        string
	UpdatedAt        string
}{
	NoticeID:         "notice_followed.notice_id",
	UserID:           "notice_followed.user_id",
	UserThumbnailURL: "notice_followed.user_thumbnail_url",
	Body:             "notice_followed.body",
	CreatedAt:        "notice_followed.created_at",
	UpdatedAt:        "notice_followed.updated_at",
}

// Generated where

var NoticeFollowedWhere = struct {
	NoticeID         whereHelperint
	UserID           whereHelperint
	UserThumbnailURL whereHelperstring
	Body             whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	NoticeID:         whereHelperint{field: "`notice_followed`.`notice_id`"},
	UserID:           whereHelperint{field: "`notice_followed`.`user_id`"},
	UserThumbnailURL: whereHelperstring{field: "`notice_followed`.`user_thumbnail_url`"},
	Body:             whereHelperstring{field: "`notice_followed`.`body`"},
	CreatedAt:        whereHelpertime_Time{field: "`notice_followed`.`created_at`"},
	UpdatedAt:        whereHelpertime_Time{field: "`notice_followed`.`updated_at`"},
}

// NoticeFollowedRels is where relationship names are stored.
var NoticeFollowedRels = struct {
	Notice string
	User   string
}{
	Notice: "Notice",
	User:   "User",
}

// noticeFollowedR is where relationships are stored.
type noticeFollowedR struct {
	Notice *Notice `boil:"Notice" json:"Notice" toml:"Notice" yaml:"Notice"`
	User   *User   `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*noticeFollowedR) NewStruct() *noticeFollowedR {
	return &noticeFollowedR{}
}

// noticeFollowedL is where Load methods for each relationship are stored.
type noticeFollowedL struct{}

var (
	noticeFollowedAllColumns            = []string{"notice_id", "user_id", "user_thumbnail_url", "body", "created_at", "updated_at"}
	noticeFollowedColumnsWithoutDefault = []string{"notice_id", "user_id", "user_thumbnail_url", "body", "created_at", "updated_at"}
	noticeFollowedColumnsWithDefault    = []string{}
	noticeFollowedPrimaryKeyColumns     = []string{"notice_id"}
)

type (
	// NoticeFollowedSlice is an alias for a slice of pointers to NoticeFollowed.
	// This should almost always be used instead of []NoticeFollowed.
	NoticeFollowedSlice []*NoticeFollowed
	// NoticeFollowedHook is the signature for custom NoticeFollowed hook methods
	NoticeFollowedHook func(context.Context, boil.ContextExecutor, *NoticeFollowed) error

	noticeFollowedQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	noticeFollowedType                 = reflect.TypeOf(&NoticeFollowed{})
	noticeFollowedMapping              = queries.MakeStructMapping(noticeFollowedType)
	noticeFollowedPrimaryKeyMapping, _ = queries.BindMapping(noticeFollowedType, noticeFollowedMapping, noticeFollowedPrimaryKeyColumns)
	noticeFollowedInsertCacheMut       sync.RWMutex
	noticeFollowedInsertCache          = make(map[string]insertCache)
	noticeFollowedUpdateCacheMut       sync.RWMutex
	noticeFollowedUpdateCache          = make(map[string]updateCache)
	noticeFollowedUpsertCacheMut       sync.RWMutex
	noticeFollowedUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var noticeFollowedBeforeInsertHooks []NoticeFollowedHook
var noticeFollowedBeforeUpdateHooks []NoticeFollowedHook
var noticeFollowedBeforeDeleteHooks []NoticeFollowedHook
var noticeFollowedBeforeUpsertHooks []NoticeFollowedHook

var noticeFollowedAfterInsertHooks []NoticeFollowedHook
var noticeFollowedAfterSelectHooks []NoticeFollowedHook
var noticeFollowedAfterUpdateHooks []NoticeFollowedHook
var noticeFollowedAfterDeleteHooks []NoticeFollowedHook
var noticeFollowedAfterUpsertHooks []NoticeFollowedHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NoticeFollowed) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NoticeFollowed) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NoticeFollowed) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NoticeFollowed) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NoticeFollowed) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NoticeFollowed) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NoticeFollowed) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NoticeFollowed) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NoticeFollowed) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFollowedAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNoticeFollowedHook registers your hook function for all future operations.
func AddNoticeFollowedHook(hookPoint boil.HookPoint, noticeFollowedHook NoticeFollowedHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		noticeFollowedBeforeInsertHooks = append(noticeFollowedBeforeInsertHooks, noticeFollowedHook)
	case boil.BeforeUpdateHook:
		noticeFollowedBeforeUpdateHooks = append(noticeFollowedBeforeUpdateHooks, noticeFollowedHook)
	case boil.BeforeDeleteHook:
		noticeFollowedBeforeDeleteHooks = append(noticeFollowedBeforeDeleteHooks, noticeFollowedHook)
	case boil.BeforeUpsertHook:
		noticeFollowedBeforeUpsertHooks = append(noticeFollowedBeforeUpsertHooks, noticeFollowedHook)
	case boil.AfterInsertHook:
		noticeFollowedAfterInsertHooks = append(noticeFollowedAfterInsertHooks, noticeFollowedHook)
	case boil.AfterSelectHook:
		noticeFollowedAfterSelectHooks = append(noticeFollowedAfterSelectHooks, noticeFollowedHook)
	case boil.AfterUpdateHook:
		noticeFollowedAfterUpdateHooks = append(noticeFollowedAfterUpdateHooks, noticeFollowedHook)
	case boil.AfterDeleteHook:
		noticeFollowedAfterDeleteHooks = append(noticeFollowedAfterDeleteHooks, noticeFollowedHook)
	case boil.AfterUpsertHook:
		noticeFollowedAfterUpsertHooks = append(noticeFollowedAfterUpsertHooks, noticeFollowedHook)
	}
}

// One returns a single noticeFollowed record from the query.
func (q noticeFollowedQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NoticeFollowed, error) {
	o := &NoticeFollowed{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notice_followed")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NoticeFollowed records from the query.
func (q noticeFollowedQuery) All(ctx context.Context, exec boil.ContextExecutor) (NoticeFollowedSlice, error) {
	var o []*NoticeFollowed

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NoticeFollowed slice")
	}

	if len(noticeFollowedAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NoticeFollowed records in the query.
func (q noticeFollowedQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notice_followed rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q noticeFollowedQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notice_followed exists")
	}

	return count > 0, nil
}

// Notice pointed to by the foreign key.
func (o *NoticeFollowed) Notice(mods ...qm.QueryMod) noticeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.NoticeID),
	}

	queryMods = append(queryMods, mods...)

	query := Notices(queryMods...)
	queries.SetFrom(query.Query, "`notice`")

	return query
}

// User pointed to by the foreign key.
func (o *NoticeFollowed) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadNotice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noticeFollowedL) LoadNotice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNoticeFollowed interface{}, mods queries.Applicator) error {
	var slice []*NoticeFollowed
	var object *NoticeFollowed

	if singular {
		object = maybeNoticeFollowed.(*NoticeFollowed)
	} else {
		slice = *maybeNoticeFollowed.(*[]*NoticeFollowed)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noticeFollowedR{}
		}
		args = append(args, object.NoticeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeFollowedR{}
			}

			for _, a := range args {
				if a == obj.NoticeID {
					continue Outer
				}
			}

			args = append(args, obj.NoticeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notice`),
		qm.WhereIn(`notice.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Notice")
	}

	var resultSlice []*Notice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Notice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for notice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notice")
	}

	if len(noticeFollowedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Notice = foreign
		if foreign.R == nil {
			foreign.R = &noticeR{}
		}
		foreign.R.NoticeFollowed = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NoticeID == foreign.ID {
				local.R.Notice = foreign
				if foreign.R == nil {
					foreign.R = &noticeR{}
				}
				foreign.R.NoticeFollowed = local
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noticeFollowedL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNoticeFollowed interface{}, mods queries.Applicator) error {
	var slice []*NoticeFollowed
	var object *NoticeFollowed

	if singular {
		object = maybeNoticeFollowed.(*NoticeFollowed)
	} else {
		slice = *maybeNoticeFollowed.(*[]*NoticeFollowed)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noticeFollowedR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeFollowedR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(noticeFollowedAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.NoticeFolloweds = append(foreign.R.NoticeFolloweds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.NoticeFolloweds = append(foreign.R.NoticeFolloweds, local)
				break
			}
		}
	}

	return nil
}

// SetNotice of the noticeFollowed to the related item.
// Sets o.R.Notice to related.
// Adds o to related.R.NoticeFollowed.
func (o *NoticeFollowed) SetNotice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Notice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notice_followed` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"notice_id"}),
		strmangle.WhereClause("`", "`", 0, noticeFollowedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.NoticeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NoticeID = related.ID
	if o.R == nil {
		o.R = &noticeFollowedR{
			Notice: related,
		}
	} else {
		o.R.Notice = related
	}

	if related.R == nil {
		related.R = &noticeR{
			NoticeFollowed: o,
		}
	} else {
		related.R.NoticeFollowed = o
	}

	return nil
}

// SetUser of the noticeFollowed to the related item.
// Sets o.R.User to related.
// Adds o to related.R.NoticeFolloweds.
func (o *NoticeFollowed) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notice_followed` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, noticeFollowedPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.NoticeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &noticeFollowedR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			NoticeFolloweds: NoticeFollowedSlice{o},
		}
	} else {
		related.R.NoticeFolloweds = append(related.R.NoticeFolloweds, o)
	}

	return nil
}

// NoticeFolloweds retrieves all the records using an executor.
func NoticeFolloweds(mods ...qm.QueryMod) noticeFollowedQuery {
	mods = append(mods, qm.From("`notice_followed`"))
	return noticeFollowedQuery{NewQuery(mods...)}
}

// FindNoticeFollowed retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNoticeFollowed(ctx context.Context, exec boil.ContextExecutor, noticeID int, selectCols ...string) (*NoticeFollowed, error) {
	noticeFollowedObj := &NoticeFollowed{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notice_followed` where `notice_id`=?", sel,
	)

	q := queries.Raw(query, noticeID)

	err := q.Bind(ctx, exec, noticeFollowedObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notice_followed")
	}

	if err = noticeFollowedObj.doAfterSelectHooks(ctx, exec); err != nil {
		return noticeFollowedObj, err
	}

	return noticeFollowedObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NoticeFollowed) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notice_followed provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeFollowedColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	noticeFollowedInsertCacheMut.RLock()
	cache, cached := noticeFollowedInsertCache[key]
	noticeFollowedInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			noticeFollowedAllColumns,
			noticeFollowedColumnsWithDefault,
			noticeFollowedColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(noticeFollowedType, noticeFollowedMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(noticeFollowedType, noticeFollowedMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notice_followed` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notice_followed` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notice_followed` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, noticeFollowedPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notice_followed")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NoticeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notice_followed")
	}

CacheNoHooks:
	if !cached {
		noticeFollowedInsertCacheMut.Lock()
		noticeFollowedInsertCache[key] = cache
		noticeFollowedInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NoticeFollowed.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NoticeFollowed) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	noticeFollowedUpdateCacheMut.RLock()
	cache, cached := noticeFollowedUpdateCache[key]
	noticeFollowedUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			noticeFollowedAllColumns,
			noticeFollowedPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notice_followed, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notice_followed` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, noticeFollowedPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(noticeFollowedType, noticeFollowedMapping, append(wl, noticeFollowedPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notice_followed row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notice_followed")
	}

	if !cached {
		noticeFollowedUpdateCacheMut.Lock()
		noticeFollowedUpdateCache[key] = cache
		noticeFollowedUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q noticeFollowedQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notice_followed")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notice_followed")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NoticeFollowedSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticeFollowedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notice_followed` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticeFollowedPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in noticeFollowed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all noticeFollowed")
	}
	return rowsAff, nil
}

var mySQLNoticeFollowedUniqueColumns = []string{
	"notice_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NoticeFollowed) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notice_followed provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeFollowedColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNoticeFollowedUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	noticeFollowedUpsertCacheMut.RLock()
	cache, cached := noticeFollowedUpsertCache[key]
	noticeFollowedUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			noticeFollowedAllColumns,
			noticeFollowedColumnsWithDefault,
			noticeFollowedColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			noticeFollowedAllColumns,
			noticeFollowedPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert notice_followed, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`notice_followed`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notice_followed` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(noticeFollowedType, noticeFollowedMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(noticeFollowedType, noticeFollowedMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for notice_followed")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(noticeFollowedType, noticeFollowedMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for notice_followed")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notice_followed")
	}

CacheNoHooks:
	if !cached {
		noticeFollowedUpsertCacheMut.Lock()
		noticeFollowedUpsertCache[key] = cache
		noticeFollowedUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NoticeFollowed record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NoticeFollowed) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NoticeFollowed provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), noticeFollowedPrimaryKeyMapping)
	sql := "DELETE FROM `notice_followed` WHERE `notice_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notice_followed")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notice_followed")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q noticeFollowedQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no noticeFollowedQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notice_followed")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notice_followed")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NoticeFollowedSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(noticeFollowedBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticeFollowedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notice_followed` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticeFollowedPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from noticeFollowed slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notice_followed")
	}

	if len(noticeFollowedAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NoticeFollowed) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNoticeFollowed(ctx, exec, o.NoticeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoticeFollowedSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NoticeFollowedSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticeFollowedPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notice_followed`.* FROM `notice_followed` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticeFollowedPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NoticeFollowedSlice")
	}

	*o = slice

	return nil
}

// NoticeFollowedExists checks if the NoticeFollowed row exists.
func NoticeFollowedExists(ctx context.Context, exec boil.ContextExecutor, noticeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notice_followed` where `notice_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, noticeID)
	}
	row := exec.QueryRowContext(ctx, sql, noticeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notice_followed exists")
	}

	return exists, nil
}
