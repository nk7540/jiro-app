// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NoticeFavorite is an object representing the database table.
type NoticeFavorite struct {
	NoticeID            int       `boil:"notice_id" json:"notice_id" toml:"notice_id" yaml:"notice_id"`
	FavoriteID          int       `boil:"favorite_id" json:"favorite_id" toml:"favorite_id" yaml:"favorite_id"`
	UserID              int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	UserThumbnailURL    string    `boil:"user_thumbnail_url" json:"user_thumbnail_url" toml:"user_thumbnail_url" yaml:"user_thumbnail_url"`
	Header              string    `boil:"header" json:"header" toml:"header" yaml:"header"`
	Body                string    `boil:"body" json:"body" toml:"body" yaml:"body"`
	ContentID           int       `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`
	ContentThumbnailURL string    `boil:"content_thumbnail_url" json:"content_thumbnail_url" toml:"content_thumbnail_url" yaml:"content_thumbnail_url"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *noticeFavoriteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L noticeFavoriteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NoticeFavoriteColumns = struct {
	NoticeID            string
	FavoriteID          string
	UserID              string
	UserThumbnailURL    string
	Header              string
	Body                string
	ContentID           string
	ContentThumbnailURL string
	CreatedAt           string
	UpdatedAt           string
}{
	NoticeID:            "notice_id",
	FavoriteID:          "favorite_id",
	UserID:              "user_id",
	UserThumbnailURL:    "user_thumbnail_url",
	Header:              "header",
	Body:                "body",
	ContentID:           "content_id",
	ContentThumbnailURL: "content_thumbnail_url",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

var NoticeFavoriteTableColumns = struct {
	NoticeID            string
	FavoriteID          string
	UserID              string
	UserThumbnailURL    string
	Header              string
	Body                string
	ContentID           string
	ContentThumbnailURL string
	CreatedAt           string
	UpdatedAt           string
}{
	NoticeID:            "notice_favorite.notice_id",
	FavoriteID:          "notice_favorite.favorite_id",
	UserID:              "notice_favorite.user_id",
	UserThumbnailURL:    "notice_favorite.user_thumbnail_url",
	Header:              "notice_favorite.header",
	Body:                "notice_favorite.body",
	ContentID:           "notice_favorite.content_id",
	ContentThumbnailURL: "notice_favorite.content_thumbnail_url",
	CreatedAt:           "notice_favorite.created_at",
	UpdatedAt:           "notice_favorite.updated_at",
}

// Generated where

var NoticeFavoriteWhere = struct {
	NoticeID            whereHelperint
	FavoriteID          whereHelperint
	UserID              whereHelperint
	UserThumbnailURL    whereHelperstring
	Header              whereHelperstring
	Body                whereHelperstring
	ContentID           whereHelperint
	ContentThumbnailURL whereHelperstring
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
}{
	NoticeID:            whereHelperint{field: "`notice_favorite`.`notice_id`"},
	FavoriteID:          whereHelperint{field: "`notice_favorite`.`favorite_id`"},
	UserID:              whereHelperint{field: "`notice_favorite`.`user_id`"},
	UserThumbnailURL:    whereHelperstring{field: "`notice_favorite`.`user_thumbnail_url`"},
	Header:              whereHelperstring{field: "`notice_favorite`.`header`"},
	Body:                whereHelperstring{field: "`notice_favorite`.`body`"},
	ContentID:           whereHelperint{field: "`notice_favorite`.`content_id`"},
	ContentThumbnailURL: whereHelperstring{field: "`notice_favorite`.`content_thumbnail_url`"},
	CreatedAt:           whereHelpertime_Time{field: "`notice_favorite`.`created_at`"},
	UpdatedAt:           whereHelpertime_Time{field: "`notice_favorite`.`updated_at`"},
}

// NoticeFavoriteRels is where relationship names are stored.
var NoticeFavoriteRels = struct {
	Content  string
	Favorite string
	Notice   string
	User     string
}{
	Content:  "Content",
	Favorite: "Favorite",
	Notice:   "Notice",
	User:     "User",
}

// noticeFavoriteR is where relationships are stored.
type noticeFavoriteR struct {
	Content  *Content  `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
	Favorite *Favorite `boil:"Favorite" json:"Favorite" toml:"Favorite" yaml:"Favorite"`
	Notice   *Notice   `boil:"Notice" json:"Notice" toml:"Notice" yaml:"Notice"`
	User     *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*noticeFavoriteR) NewStruct() *noticeFavoriteR {
	return &noticeFavoriteR{}
}

// noticeFavoriteL is where Load methods for each relationship are stored.
type noticeFavoriteL struct{}

var (
	noticeFavoriteAllColumns            = []string{"notice_id", "favorite_id", "user_id", "user_thumbnail_url", "header", "body", "content_id", "content_thumbnail_url", "created_at", "updated_at"}
	noticeFavoriteColumnsWithoutDefault = []string{"notice_id", "favorite_id", "user_id", "user_thumbnail_url", "header", "body", "content_id", "content_thumbnail_url", "created_at", "updated_at"}
	noticeFavoriteColumnsWithDefault    = []string{}
	noticeFavoritePrimaryKeyColumns     = []string{"notice_id"}
)

type (
	// NoticeFavoriteSlice is an alias for a slice of pointers to NoticeFavorite.
	// This should almost always be used instead of []NoticeFavorite.
	NoticeFavoriteSlice []*NoticeFavorite
	// NoticeFavoriteHook is the signature for custom NoticeFavorite hook methods
	NoticeFavoriteHook func(context.Context, boil.ContextExecutor, *NoticeFavorite) error

	noticeFavoriteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	noticeFavoriteType                 = reflect.TypeOf(&NoticeFavorite{})
	noticeFavoriteMapping              = queries.MakeStructMapping(noticeFavoriteType)
	noticeFavoritePrimaryKeyMapping, _ = queries.BindMapping(noticeFavoriteType, noticeFavoriteMapping, noticeFavoritePrimaryKeyColumns)
	noticeFavoriteInsertCacheMut       sync.RWMutex
	noticeFavoriteInsertCache          = make(map[string]insertCache)
	noticeFavoriteUpdateCacheMut       sync.RWMutex
	noticeFavoriteUpdateCache          = make(map[string]updateCache)
	noticeFavoriteUpsertCacheMut       sync.RWMutex
	noticeFavoriteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var noticeFavoriteBeforeInsertHooks []NoticeFavoriteHook
var noticeFavoriteBeforeUpdateHooks []NoticeFavoriteHook
var noticeFavoriteBeforeDeleteHooks []NoticeFavoriteHook
var noticeFavoriteBeforeUpsertHooks []NoticeFavoriteHook

var noticeFavoriteAfterInsertHooks []NoticeFavoriteHook
var noticeFavoriteAfterSelectHooks []NoticeFavoriteHook
var noticeFavoriteAfterUpdateHooks []NoticeFavoriteHook
var noticeFavoriteAfterDeleteHooks []NoticeFavoriteHook
var noticeFavoriteAfterUpsertHooks []NoticeFavoriteHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *NoticeFavorite) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *NoticeFavorite) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *NoticeFavorite) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *NoticeFavorite) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *NoticeFavorite) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *NoticeFavorite) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *NoticeFavorite) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *NoticeFavorite) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *NoticeFavorite) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range noticeFavoriteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNoticeFavoriteHook registers your hook function for all future operations.
func AddNoticeFavoriteHook(hookPoint boil.HookPoint, noticeFavoriteHook NoticeFavoriteHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		noticeFavoriteBeforeInsertHooks = append(noticeFavoriteBeforeInsertHooks, noticeFavoriteHook)
	case boil.BeforeUpdateHook:
		noticeFavoriteBeforeUpdateHooks = append(noticeFavoriteBeforeUpdateHooks, noticeFavoriteHook)
	case boil.BeforeDeleteHook:
		noticeFavoriteBeforeDeleteHooks = append(noticeFavoriteBeforeDeleteHooks, noticeFavoriteHook)
	case boil.BeforeUpsertHook:
		noticeFavoriteBeforeUpsertHooks = append(noticeFavoriteBeforeUpsertHooks, noticeFavoriteHook)
	case boil.AfterInsertHook:
		noticeFavoriteAfterInsertHooks = append(noticeFavoriteAfterInsertHooks, noticeFavoriteHook)
	case boil.AfterSelectHook:
		noticeFavoriteAfterSelectHooks = append(noticeFavoriteAfterSelectHooks, noticeFavoriteHook)
	case boil.AfterUpdateHook:
		noticeFavoriteAfterUpdateHooks = append(noticeFavoriteAfterUpdateHooks, noticeFavoriteHook)
	case boil.AfterDeleteHook:
		noticeFavoriteAfterDeleteHooks = append(noticeFavoriteAfterDeleteHooks, noticeFavoriteHook)
	case boil.AfterUpsertHook:
		noticeFavoriteAfterUpsertHooks = append(noticeFavoriteAfterUpsertHooks, noticeFavoriteHook)
	}
}

// One returns a single noticeFavorite record from the query.
func (q noticeFavoriteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NoticeFavorite, error) {
	o := &NoticeFavorite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notice_favorite")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all NoticeFavorite records from the query.
func (q noticeFavoriteQuery) All(ctx context.Context, exec boil.ContextExecutor) (NoticeFavoriteSlice, error) {
	var o []*NoticeFavorite

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NoticeFavorite slice")
	}

	if len(noticeFavoriteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all NoticeFavorite records in the query.
func (q noticeFavoriteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notice_favorite rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q noticeFavoriteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notice_favorite exists")
	}

	return count > 0, nil
}

// Content pointed to by the foreign key.
func (o *NoticeFavorite) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	query := Contents(queryMods...)
	queries.SetFrom(query.Query, "`content`")

	return query
}

// Favorite pointed to by the foreign key.
func (o *NoticeFavorite) Favorite(mods ...qm.QueryMod) favoriteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.FavoriteID),
	}

	queryMods = append(queryMods, mods...)

	query := Favorites(queryMods...)
	queries.SetFrom(query.Query, "`favorite`")

	return query
}

// Notice pointed to by the foreign key.
func (o *NoticeFavorite) Notice(mods ...qm.QueryMod) noticeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.NoticeID),
	}

	queryMods = append(queryMods, mods...)

	query := Notices(queryMods...)
	queries.SetFrom(query.Query, "`notice`")

	return query
}

// User pointed to by the foreign key.
func (o *NoticeFavorite) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noticeFavoriteL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNoticeFavorite interface{}, mods queries.Applicator) error {
	var slice []*NoticeFavorite
	var object *NoticeFavorite

	if singular {
		object = maybeNoticeFavorite.(*NoticeFavorite)
	} else {
		slice = *maybeNoticeFavorite.(*[]*NoticeFavorite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noticeFavoriteR{}
		}
		args = append(args, object.ContentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeFavoriteR{}
			}

			for _, a := range args {
				if a == obj.ContentID {
					continue Outer
				}
			}

			args = append(args, obj.ContentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content`),
		qm.WhereIn(`content.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content")
	}

	if len(noticeFavoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		if foreign.R == nil {
			foreign.R = &contentR{}
		}
		foreign.R.NoticeFavorites = append(foreign.R.NoticeFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ID {
				local.R.Content = foreign
				if foreign.R == nil {
					foreign.R = &contentR{}
				}
				foreign.R.NoticeFavorites = append(foreign.R.NoticeFavorites, local)
				break
			}
		}
	}

	return nil
}

// LoadFavorite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noticeFavoriteL) LoadFavorite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNoticeFavorite interface{}, mods queries.Applicator) error {
	var slice []*NoticeFavorite
	var object *NoticeFavorite

	if singular {
		object = maybeNoticeFavorite.(*NoticeFavorite)
	} else {
		slice = *maybeNoticeFavorite.(*[]*NoticeFavorite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noticeFavoriteR{}
		}
		args = append(args, object.FavoriteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeFavoriteR{}
			}

			for _, a := range args {
				if a == obj.FavoriteID {
					continue Outer
				}
			}

			args = append(args, obj.FavoriteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`favorite`),
		qm.WhereIn(`favorite.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Favorite")
	}

	var resultSlice []*Favorite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Favorite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for favorite")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for favorite")
	}

	if len(noticeFavoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Favorite = foreign
		if foreign.R == nil {
			foreign.R = &favoriteR{}
		}
		foreign.R.NoticeFavorites = append(foreign.R.NoticeFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FavoriteID == foreign.ID {
				local.R.Favorite = foreign
				if foreign.R == nil {
					foreign.R = &favoriteR{}
				}
				foreign.R.NoticeFavorites = append(foreign.R.NoticeFavorites, local)
				break
			}
		}
	}

	return nil
}

// LoadNotice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noticeFavoriteL) LoadNotice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNoticeFavorite interface{}, mods queries.Applicator) error {
	var slice []*NoticeFavorite
	var object *NoticeFavorite

	if singular {
		object = maybeNoticeFavorite.(*NoticeFavorite)
	} else {
		slice = *maybeNoticeFavorite.(*[]*NoticeFavorite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noticeFavoriteR{}
		}
		args = append(args, object.NoticeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeFavoriteR{}
			}

			for _, a := range args {
				if a == obj.NoticeID {
					continue Outer
				}
			}

			args = append(args, obj.NoticeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notice`),
		qm.WhereIn(`notice.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Notice")
	}

	var resultSlice []*Notice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Notice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for notice")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notice")
	}

	if len(noticeFavoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Notice = foreign
		if foreign.R == nil {
			foreign.R = &noticeR{}
		}
		foreign.R.NoticeFavorite = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NoticeID == foreign.ID {
				local.R.Notice = foreign
				if foreign.R == nil {
					foreign.R = &noticeR{}
				}
				foreign.R.NoticeFavorite = local
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (noticeFavoriteL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNoticeFavorite interface{}, mods queries.Applicator) error {
	var slice []*NoticeFavorite
	var object *NoticeFavorite

	if singular {
		object = maybeNoticeFavorite.(*NoticeFavorite)
	} else {
		slice = *maybeNoticeFavorite.(*[]*NoticeFavorite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &noticeFavoriteR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeFavoriteR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(noticeFavoriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.NoticeFavorites = append(foreign.R.NoticeFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.NoticeFavorites = append(foreign.R.NoticeFavorites, local)
				break
			}
		}
	}

	return nil
}

// SetContent of the noticeFavorite to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.NoticeFavorites.
func (o *NoticeFavorite) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notice_favorite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"content_id"}),
		strmangle.WhereClause("`", "`", 0, noticeFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.NoticeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ID
	if o.R == nil {
		o.R = &noticeFavoriteR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	if related.R == nil {
		related.R = &contentR{
			NoticeFavorites: NoticeFavoriteSlice{o},
		}
	} else {
		related.R.NoticeFavorites = append(related.R.NoticeFavorites, o)
	}

	return nil
}

// SetFavorite of the noticeFavorite to the related item.
// Sets o.R.Favorite to related.
// Adds o to related.R.NoticeFavorites.
func (o *NoticeFavorite) SetFavorite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Favorite) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notice_favorite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"favorite_id"}),
		strmangle.WhereClause("`", "`", 0, noticeFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.NoticeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FavoriteID = related.ID
	if o.R == nil {
		o.R = &noticeFavoriteR{
			Favorite: related,
		}
	} else {
		o.R.Favorite = related
	}

	if related.R == nil {
		related.R = &favoriteR{
			NoticeFavorites: NoticeFavoriteSlice{o},
		}
	} else {
		related.R.NoticeFavorites = append(related.R.NoticeFavorites, o)
	}

	return nil
}

// SetNotice of the noticeFavorite to the related item.
// Sets o.R.Notice to related.
// Adds o to related.R.NoticeFavorite.
func (o *NoticeFavorite) SetNotice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Notice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notice_favorite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"notice_id"}),
		strmangle.WhereClause("`", "`", 0, noticeFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.NoticeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NoticeID = related.ID
	if o.R == nil {
		o.R = &noticeFavoriteR{
			Notice: related,
		}
	} else {
		o.R.Notice = related
	}

	if related.R == nil {
		related.R = &noticeR{
			NoticeFavorite: o,
		}
	} else {
		related.R.NoticeFavorite = o
	}

	return nil
}

// SetUser of the noticeFavorite to the related item.
// Sets o.R.User to related.
// Adds o to related.R.NoticeFavorites.
func (o *NoticeFavorite) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `notice_favorite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, noticeFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.NoticeID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &noticeFavoriteR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			NoticeFavorites: NoticeFavoriteSlice{o},
		}
	} else {
		related.R.NoticeFavorites = append(related.R.NoticeFavorites, o)
	}

	return nil
}

// NoticeFavorites retrieves all the records using an executor.
func NoticeFavorites(mods ...qm.QueryMod) noticeFavoriteQuery {
	mods = append(mods, qm.From("`notice_favorite`"))
	return noticeFavoriteQuery{NewQuery(mods...)}
}

// FindNoticeFavorite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNoticeFavorite(ctx context.Context, exec boil.ContextExecutor, noticeID int, selectCols ...string) (*NoticeFavorite, error) {
	noticeFavoriteObj := &NoticeFavorite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `notice_favorite` where `notice_id`=?", sel,
	)

	q := queries.Raw(query, noticeID)

	err := q.Bind(ctx, exec, noticeFavoriteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notice_favorite")
	}

	if err = noticeFavoriteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return noticeFavoriteObj, err
	}

	return noticeFavoriteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NoticeFavorite) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notice_favorite provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeFavoriteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	noticeFavoriteInsertCacheMut.RLock()
	cache, cached := noticeFavoriteInsertCache[key]
	noticeFavoriteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			noticeFavoriteAllColumns,
			noticeFavoriteColumnsWithDefault,
			noticeFavoriteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(noticeFavoriteType, noticeFavoriteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(noticeFavoriteType, noticeFavoriteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `notice_favorite` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `notice_favorite` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `notice_favorite` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, noticeFavoritePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notice_favorite")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NoticeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notice_favorite")
	}

CacheNoHooks:
	if !cached {
		noticeFavoriteInsertCacheMut.Lock()
		noticeFavoriteInsertCache[key] = cache
		noticeFavoriteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the NoticeFavorite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NoticeFavorite) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	noticeFavoriteUpdateCacheMut.RLock()
	cache, cached := noticeFavoriteUpdateCache[key]
	noticeFavoriteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			noticeFavoriteAllColumns,
			noticeFavoritePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notice_favorite, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `notice_favorite` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, noticeFavoritePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(noticeFavoriteType, noticeFavoriteMapping, append(wl, noticeFavoritePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notice_favorite row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notice_favorite")
	}

	if !cached {
		noticeFavoriteUpdateCacheMut.Lock()
		noticeFavoriteUpdateCache[key] = cache
		noticeFavoriteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q noticeFavoriteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notice_favorite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notice_favorite")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NoticeFavoriteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticeFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `notice_favorite` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticeFavoritePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in noticeFavorite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all noticeFavorite")
	}
	return rowsAff, nil
}

var mySQLNoticeFavoriteUniqueColumns = []string{
	"notice_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NoticeFavorite) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notice_favorite provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeFavoriteColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLNoticeFavoriteUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	noticeFavoriteUpsertCacheMut.RLock()
	cache, cached := noticeFavoriteUpsertCache[key]
	noticeFavoriteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			noticeFavoriteAllColumns,
			noticeFavoriteColumnsWithDefault,
			noticeFavoriteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			noticeFavoriteAllColumns,
			noticeFavoritePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert notice_favorite, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`notice_favorite`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `notice_favorite` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(noticeFavoriteType, noticeFavoriteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(noticeFavoriteType, noticeFavoriteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for notice_favorite")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(noticeFavoriteType, noticeFavoriteMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for notice_favorite")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for notice_favorite")
	}

CacheNoHooks:
	if !cached {
		noticeFavoriteUpsertCacheMut.Lock()
		noticeFavoriteUpsertCache[key] = cache
		noticeFavoriteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single NoticeFavorite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NoticeFavorite) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NoticeFavorite provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), noticeFavoritePrimaryKeyMapping)
	sql := "DELETE FROM `notice_favorite` WHERE `notice_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notice_favorite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notice_favorite")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q noticeFavoriteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no noticeFavoriteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notice_favorite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notice_favorite")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NoticeFavoriteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(noticeFavoriteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticeFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `notice_favorite` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticeFavoritePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from noticeFavorite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notice_favorite")
	}

	if len(noticeFavoriteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NoticeFavorite) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNoticeFavorite(ctx, exec, o.NoticeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoticeFavoriteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NoticeFavoriteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticeFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `notice_favorite`.* FROM `notice_favorite` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, noticeFavoritePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NoticeFavoriteSlice")
	}

	*o = slice

	return nil
}

// NoticeFavoriteExists checks if the NoticeFavorite row exists.
func NoticeFavoriteExists(ctx context.Context, exec boil.ContextExecutor, noticeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `notice_favorite` where `notice_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, noticeID)
	}
	row := exec.QueryRowContext(ctx, sql, noticeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notice_favorite exists")
	}

	return exists, nil
}
