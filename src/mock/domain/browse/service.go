// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/browse/service.go

// Package mock_browse is a generated GoMock package.
package mock_browse

import (
	browse "artics-api/src/internal/domain/browse"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrowseService is a mock of BrowseService interface.
type MockBrowseService struct {
	ctrl     *gomock.Controller
	recorder *MockBrowseServiceMockRecorder
}

// MockBrowseServiceMockRecorder is the mock recorder for MockBrowseService.
type MockBrowseServiceMockRecorder struct {
	mock *MockBrowseService
}

// NewMockBrowseService creates a new mock instance.
func NewMockBrowseService(ctrl *gomock.Controller) *MockBrowseService {
	mock := &MockBrowseService{ctrl: ctrl}
	mock.recorder = &MockBrowseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrowseService) EXPECT() *MockBrowseServiceMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockBrowseService) Save(ctx context.Context, b *browse.Browse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBrowseServiceMockRecorder) Save(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBrowseService)(nil).Save), ctx, b)
}
