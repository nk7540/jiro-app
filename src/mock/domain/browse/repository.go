// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/browse/repository.go

// Package mock_browse is a generated GoMock package.
package mock_browse

import (
	browse "artics-api/src/internal/domain/browse"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrowseRepository is a mock of BrowseRepository interface.
type MockBrowseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBrowseRepositoryMockRecorder
}

// MockBrowseRepositoryMockRecorder is the mock recorder for MockBrowseRepository.
type MockBrowseRepositoryMockRecorder struct {
	mock *MockBrowseRepository
}

// NewMockBrowseRepository creates a new mock instance.
func NewMockBrowseRepository(ctrl *gomock.Controller) *MockBrowseRepository {
	mock := &MockBrowseRepository{ctrl: ctrl}
	mock.recorder = &MockBrowseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrowseRepository) EXPECT() *MockBrowseRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockBrowseRepository) Save(ctx context.Context, b *browse.Browse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockBrowseRepositoryMockRecorder) Save(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBrowseRepository)(nil).Save), ctx, b)
}
