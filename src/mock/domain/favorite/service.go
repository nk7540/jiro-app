// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/favorite/service.go

// Package mock_favorite is a generated GoMock package.
package mock_favorite

import (
	favorite "artics-api/src/internal/domain/favorite"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFavoriteService is a mock of FavoriteService interface.
type MockFavoriteService struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteServiceMockRecorder
}

// MockFavoriteServiceMockRecorder is the mock recorder for MockFavoriteService.
type MockFavoriteServiceMockRecorder struct {
	mock *MockFavoriteService
}

// NewMockFavoriteService creates a new mock instance.
func NewMockFavoriteService(ctrl *gomock.Controller) *MockFavoriteService {
	mock := &MockFavoriteService{ctrl: ctrl}
	mock.recorder = &MockFavoriteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavoriteService) EXPECT() *MockFavoriteServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFavoriteService) Create(ctx context.Context, f *favorite.Favorite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFavoriteServiceMockRecorder) Create(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFavoriteService)(nil).Create), ctx, f)
}

// Delete mocks base method.
func (m *MockFavoriteService) Delete(ctx context.Context, f *favorite.Favorite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFavoriteServiceMockRecorder) Delete(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFavoriteService)(nil).Delete), ctx, f)
}
