// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/content/service.go

// Package mock_content is a generated GoMock package.
package mock_content

import (
	content "artics-api/src/internal/domain/content"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContentService is a mock of ContentService interface.
type MockContentService struct {
	ctrl     *gomock.Controller
	recorder *MockContentServiceMockRecorder
}

// MockContentServiceMockRecorder is the mock recorder for MockContentService.
type MockContentServiceMockRecorder struct {
	mock *MockContentService
}

// NewMockContentService creates a new mock instance.
func NewMockContentService(ctrl *gomock.Controller) *MockContentService {
	mock := &MockContentService{ctrl: ctrl}
	mock.recorder = &MockContentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentService) EXPECT() *MockContentServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockContentService) Get(ctx context.Context, id int) (*content.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*content.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContentServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContentService)(nil).Get), ctx, id)
}

// GetFavoriteContents mocks base method.
func (m *MockContentService) GetFavoriteContents(ctx context.Context, userId, limit int) ([]*content.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteContents", ctx, userId, limit)
	ret0, _ := ret[0].([]*content.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteContents indicates an expected call of GetFavoriteContents.
func (mr *MockContentServiceMockRecorder) GetFavoriteContents(ctx, userId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteContents", reflect.TypeOf((*MockContentService)(nil).GetFavoriteContents), ctx, userId, limit)
}
